// Вводится n. Определить, является ли оно степенью 2-ки?

namespace Task_06
{
    internal class Program
    {
        static void Main(string[] args)
        {
            Console.Write("Введите число n: ");
            int n = Convert.ToInt32(Console.ReadLine());

            if (n <= 0)
            {
                Console.WriteLine("Нет");
                return;
            }

            // Первый вариант - делить число на 2, пока оно делится нацело.
            // Если останется единица - число было степенью 2-ки.
            while (n % 2 == 0)
            {
                n /= 2;
            }
            bool isPowerOfTwo = n == 1;

            // Второй вариант - используя битовую операцию AND (&).            
            //    Степени двойки в двоичном представлении всегда имеют вид:
            //    1, 10, 100, 1000, 10000, ... (т.е. единица и нули после нее).
            //    Например:
            //        2 → 10
            //        4 → 100
            //        8 → 1000
            //    Если вычесть 1 из степени двойки, получим число, где все биты после единицы инвертируются:
            //        4 (100) – 1 = 3 (011)
            //        8 (1000) – 1 = 7 (0111)
            //    Применяем побитовое AND (&) между n и n - 1:
            //        Если n — степень двойки, то n & (n - 1) даст 0.
            //        Пример:
            //        8 (1000) & 7 (0111) = 0000 → 0
            //        Если n — не степень двойки, результат будет ненулевым.
            //        Пример:
            //        6 (0110) & 5 (0101) = 0100 → 4 (не ноль)

            // bool isPowerOfTwo = (n & (n - 1)) == 0;
            Console.WriteLine(isPowerOfTwo ? "Да" : "Нет");
        }
    }
}
